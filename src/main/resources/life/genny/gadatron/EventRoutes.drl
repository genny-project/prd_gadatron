package life.genny.gadatron;

import life.genny.qwandaq.message.QEventMessage;
import life.genny.qwandaq.utils.KafkaUtils;
import life.genny.kogito.common.utils.KogitoUtils;
import static life.genny.kogito.common.utils.KogitoUtils.UseService.*;
import life.genny.qwandaq.models.UserToken;
import java.util.HashMap;
import java.util.Map;
import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import life.genny.qwandaq.utils.CommonUtils;
import life.genny.qwandaq.entity.SearchEntity;
import life.genny.qwandaq.utils.SearchUtils;
import life.genny.qwandaq.entity.BaseEntity;
import life.genny.qwandaq.utils.BaseEntityUtils;
import life.genny.qwandaq.utils.CacheUtils;
import life.genny.qwandaq.utils.DefUtils;
import life.genny.qwandaq.utils.QwandaUtils;
import life.genny.qwandaq.utils.GraphQLUtils;
import life.genny.qwandaq.message.QDataBaseEntityMessage;
import life.genny.qwandaq.attribute.Attribute;


ruleflow-group 'EventRoutes'



rule QUE_ADD_PERSON
when
	msg: QEventMessage( data.code == "QUE_ADD_PERSON" )
	kogitoUtils : KogitoUtils()
	userToken : UserToken()
	defUtils : DefUtils()
then
	System.out.println("Triggering Person Edit");
	System.out.println("RULE QUE_PERSON_GRP - sourceCode="+userToken.getUserCode());
	System.out.println("RULE QUE_PERSON_GRP - targetCode="+"PER_940F6070-356B-4AF0-99F5-663E2CB5AAA4");

	JsonObject payload = Json.createObjectBuilder()
		.add("questionCode", "QUE_PERSON_GRP")
		.add("userCode", userToken.getUserCode())
		.add("sourceCode", userToken.getUserCode())
		.add("targetCode", "PER_940F6070-356B-4AF0-99F5-663E2CB5AAA4")
		.build();

	kogitoUtils.triggerWorkflow(SELF,"testQuestion", payload);
    retract(msg);
end

rule QUE_TREE_ITEM_INTERNSHIPS
when
	msg: QEventMessage( data.code == "QUE_INTERN_S1_MENU" )
	userToken: UserToken()
	kogitoUtils : KogitoUtils()
then
	System.out.println("Triggering Intern Edit");
	System.out.println("RULE QUE_INTERN_GRP - sourceCode="+userToken.getUserCode());
	System.out.println("RULE QUE_INTERN_GRP - targetCode="+"PER_940F6070-356B-4AF0-99F5-663E2CB5AAA4");

	JsonObject payload = Json.createObjectBuilder()
		.add("questionCode", "QUE_INTERN_GRP")
		.add("userCode", userToken.getUserCode())
		.add("sourceCode", userToken.getUserCode())
		.add("targetCode", "PER_940F6070-356B-4AF0-99F5-663E2CB5AAA4")
		.build();

	kogitoUtils.triggerWorkflow(SELF,"testQuestion", payload);
    retract(msg);
end


rule ACT_PRI_EVENT_BUCKET1
when
	msg: QEventMessage( data.code == "ACT_PRI_EVENT_BUCKET1" )
	userToken: UserToken()
	kogitoUtils : KogitoUtils()
	beUtils: BaseEntityUtils()
	defUtils:	DefUtils()
	qwandaUtils: QwandaUtils()
	
then
	System.out.println("Triggering Bucket1");
	System.out.println("RULE QUE_PERSON_GRP - sourceCode="+userToken.getUserCode());
	System.out.println("RULE QUE_PERSON_GRP - targetCode="+msg.getData().getTargetCode());

	JsonObject json = Json.createObjectBuilder()
		.add("sourceCode", userToken.getUserCode())
		.add("internCode", msg.getData().getTargetCode())
		.build();

	kogitoUtils.triggerWorkflow(SELF, "application", json);
	retract(msg);


end




rule QUE_TREE_ITEM_COMPANIES
when
	msg: QEventMessage(data.code == "QUE_TREE_ITEM_COMPANIES" )
then
	retract(msg);
end

rule QUE_TREE_ITEM_PERSONS
when
	msg: QEventMessage( data.code == "QUE_TREE_ITEM_PERSONS" )
then
	retract(msg);
end


rule AdminFormRule
when
	msg: QEventMessage(data.code matches "QUE_QA_.*" || data.code matches "QUE_ADD_.*" || data.code matches "QUE_.*_GRP")
	userToken : UserToken()
	kogitoUtils : KogitoUtils()
then
	System.out.println("Triggering Admin Lifecycle!");

	JsonObject json = Json.createObjectBuilder()
	    .add("questionCode", msg.getData().getCode())
		.add("entityCode", msg.getData().getTargetCode())
		.add("userCode", userToken.getUserCode())
		.build();

	kogitoUtils.triggerWorkflow(SELF, "adminLifecycle", json);
	retract(msg);
end



rule RouteTable
when
	msg: QEventMessage( data.code=="QUE_TABLE_HCOMPANIES" || data.code=="QUE_TABLE_PERSON")
	kogitoUtils : KogitoUtils()
then
	JsonObjectBuilder builder = Json.createObjectBuilder()
			.add("code", CommonUtils.removePrefix(msg.getData().getCode()));

	if (msg.getData().getTargetCode() != null)
		builder.add("targetCode", msg.getData().getTargetCode());

	kogitoUtils.triggerWorkflow(GADAQ, "view", builder.build());
	retract(msg);
end

/**
 * Message should be retracted if it has not already been.
 */
rule RetractEvent
salience 0
when
	msg: QEventMessage()
then
	System.out.println("Retracting message Gadatron");
	retract(msg);
end
